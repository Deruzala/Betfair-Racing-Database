/*
Deployment script for HorseRacing

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HorseRacing"
:setvar DefaultFilePrefix "HorseRacing"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[fn_ConvertDistanceStringToMeters]...';


GO

ALTER FUNCTION [dbo].[fn_ConvertDistanceStringToMeters](@distStr nvarchar(300)) RETURNS float
BEGIN

	/* 
		returns the equivalent in meters of a distance string expressed in miles and furlongs
		
	*/


	declare @miles float = 0
	declare @furlongs float = 0

	SET @distStr = lower(@distStr)
	
	declare @furlongStr varchar(399) = @distStr

	declare @idx int = charindex (N'm', @distStr)
	if @idx> 0
		begin
			declare @milesStr nvarchar(300) = substring(@DistStr, 1, @idx - 1)
			SET @miles = try_convert(float, @milesStr)
			SET @furlongStr =  substring(@DistStr, @idx + 1, len(@DistStr))
		end

	-- at this point @furlongStr contains an extraction of furlongs from @distStr 
	-- if @distStr also contained miles, it was removed otherwise it just has an untouched copy of @distStr

	set @idx = charindex (N'f', @distStr)
	if @idx> 0
		begin
			-- extract fraction indicator, if any
			declare @fract_idx int = charindex( N'½', lower(@furlongStr)) + charindex( N'¼', lower(@furlongStr)) + charindex( N'¾', lower(@furlongStr))
			if @fract_idx>0
				begin
					declare @fract_str varchar(300) = substring(@furlongStr,@fract_idx, 1)
					set  @furlongs = @furlongs +
						case 
							when @fract_str = N'¼' then 0.25
							when @fract_str = N'½' then 0.5
							when @fract_str = N'¾' then 0.75
							else 0
						end
					-- remove fraction from @furlongStr, leaving a string of the format '##f', where ## is an integer number
					-- of a string with only an f, meaning there's no integer part to the furloong expression
					set @furlongStr =  replace(replace(replace(@furlongStr, N'¼',''),N'½',''), N'¾', '')
				end
			if len(@furlongStr) > 1
				begin
					declare @int_furlongs float = try_convert(float, substring(@furlongStr, 1, charindex (N'f', @furlongStr)-1))
					if @int_furlongs is not null set @furlongs = @furlongs + @int_furlongs
				end
		end

	return @miles * 1609.34 + @furlongs * 201.168
    
END;
GO
PRINT N'Altering [dbo].[fn_ConvertStonesAndPoundsStringToKgs]...';


GO
ALTER FUNCTION [dbo].[fn_ConvertStonesAndPoundsStringToKgs](@intStr nvarchar(300)) RETURNS float
BEGIN

	/* 
		returns the equivalent in Kilograms of a weight expressed as string of the form SS-PP
		where SS is stones and pp is pounds
	
	*/


	declare @stones float = 0
	declare @pounds float = 0

	SET @intStr = rtrim(ltrim(lower(@intStr)))

	declare @dashIdx int = charindex('-',@intStr)
	if @dashIdx=0
		begin
			-- no - separating stones and pounds, assume the string only contains stones and no pounds at all
			set @stones = try_convert(float,@intStr)
			if @stones is null set @stones = 0;
		end
	else
		begin
			set @stones =  try_convert(float,substring(@intStr, 1, @dashIdx-1))
			if @stones is null set @stones = 0;
			set @pounds =  try_convert(float,substring(@intStr, @dashIdx+1, len(@intStr)))
			if @pounds is null set @pounds = 0;
		end

	return @stones *  6.35029 + @pounds * 0.4536
    
END;
GO
PRINT N'Altering [dbo].[fn_WinningDistanceStringToMeters]...';


GO
ALTER FUNCTION [dbo].[fn_WinningDistanceStringToMeters](@intStr varchar(10)) 
RETURNS float
BEGIN

	/* 
		returns the equivalent in meters of a winning distance expressed in heads, body lengths, etc.
		
	*/

	if @intStr is null
		return null

	declare @meters float = null
	declare @winDistStr varchar(19) = rtrim(ltrim(lower(@intStr)))

	-- remove any values values in parenthesis - they are notes
	declare @openParenthesis int = charindex('(',@winDistStr)
	declare @closeParenthesis int = charindex(')',@winDistStr)
	if @openParenthesis>0 and @closeParenthesis>0
	set @winDistStr = left(@winDistStr, @openParenthesis-1) + substring(@winDistStr, @closeParenthesis+1, len(@winDistStr))
	if @winDistStr in ('dht', 'hd', 'nk', 'nse', 'shd', 'sht-hd', 'snk' )
		-- distance in expressed as race slang slangs
		set @meters = case @winDistStr
							when 'dht' then 0 
							when'hd'then  0.40			-- head
							when 'nk'then 0.72			-- neck
							when 'nse' then 0.12		-- nose
							when 'shd'then  0.24		-- short head
							when 'sht-hd' then 0.24		-- short head
							when 'snk' then 0.54		-- short neck
						end		
	else
		begin
			-- distance expressed in horse-lengths (a horse length=2.4 m). May have fractional parts to it (such as ½, etc)
			declare @fract_idx int = charindex(N'½', @winDistStr) + charindex(N'¼', @winDistStr) + charindex(N'¾', @winDistStr)
			if @fract_idx=0
				set @meters = 0
			else
				begin
					set @meters =  case 
										when substring(@winDistStr,@fract_idx, 1)= N'½' then 0.5
										when substring(@winDistStr,@fract_idx, 1)= N'¼' then 0.25
										when substring(@winDistStr,@fract_idx, 1)= N'¾' then 0.75
										else 0
									end
					set @winDistStr = left(@winDistStr,@fract_idx-1) 
				end
			declare @horses int = try_convert(int,@winDistStr)
			if @horses is not null
					set @meters = (@meters + abs(@horses)) * 2.4
		end	
			
	return @meters
	
END
GO
PRINT N'Update complete.';


GO
